"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/goals/seasonal/create/page",{

/***/ "(app-pages-browser)/./lib/group-goals.ts":
/*!****************************!*\
  !*** ./lib/group-goals.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceptGroupGoalInvitation: () => (/* binding */ acceptGroupGoalInvitation),\n/* harmony export */   assignActivity: () => (/* binding */ assignActivity),\n/* harmony export */   canUpdateGroupGoalProgress: () => (/* binding */ canUpdateGroupGoalProgress),\n/* harmony export */   canUserEditActivity: () => (/* binding */ canUserEditActivity),\n/* harmony export */   canUserUpdateActivity: () => (/* binding */ canUserUpdateActivity),\n/* harmony export */   checkAllMembersResponded: () => (/* binding */ checkAllMembersResponded),\n/* harmony export */   completeActivity: () => (/* binding */ completeActivity),\n/* harmony export */   createGroupGoal: () => (/* binding */ createGroupGoal),\n/* harmony export */   declineGroupGoalInvitation: () => (/* binding */ declineGroupGoalInvitation),\n/* harmony export */   deleteGroupGoal: () => (/* binding */ deleteGroupGoal),\n/* harmony export */   getActivityCompletions: () => (/* binding */ getActivityCompletions),\n/* harmony export */   getActivityProgress: () => (/* binding */ getActivityProgress),\n/* harmony export */   getGroupGoalDetails: () => (/* binding */ getGroupGoalDetails),\n/* harmony export */   getGroupGoalMembers: () => (/* binding */ getGroupGoalMembers),\n/* harmony export */   getGroupGoalProgress: () => (/* binding */ getGroupGoalProgress),\n/* harmony export */   getPendingInvitations: () => (/* binding */ getPendingInvitations),\n/* harmony export */   isGroupGoalAdmin: () => (/* binding */ isGroupGoalAdmin),\n/* harmony export */   uncompleteActivity: () => (/* binding */ uncompleteActivity),\n/* harmony export */   updateActivityAssignment: () => (/* binding */ updateActivityAssignment),\n/* harmony export */   updateGroupGoal: () => (/* binding */ updateGroupGoal)\n/* harmony export */ });\n/* harmony import */ var _supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase-client */ \"(app-pages-browser)/./lib/supabase-client.ts\");\n/**\n * Group Goals Service\n * Handles all group goal operations including invitations, member management, and activity assignments\n */ \n/**\n * Create a group goal with initial members\n */ async function createGroupGoal(goalData, memberIds) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Create the goal\n        const { data: goal, error: goalError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').insert({\n            ...goalData,\n            user_id: user.id,\n            is_group_goal: true,\n            group_goal_status: 'pending'\n        }).select().single();\n        if (goalError) throw goalError;\n        // Add owner as accepted member\n        const { error: memberError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').insert({\n            goal_id: goal.id,\n            user_id: user.id,\n            role: 'owner',\n            status: 'accepted',\n            can_edit: true\n        });\n        if (memberError) {\n            console.error('Error adding owner as member:', memberError);\n        }\n        // Send invitations to members\n        const invitations = memberIds.map((memberId)=>({\n                goal_id: goal.id,\n                inviter_id: user.id,\n                invitee_id: memberId,\n                status: 'pending',\n                message: \"Join our group goal: \".concat(goalData.title)\n            }));\n        const { error: inviteError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_invitations').insert(invitations);\n        if (inviteError) throw inviteError;\n        // Create notifications for invitees\n        const { data: profile } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('first_name, last_name, username').eq('id', user.id).single();\n        const userName = profile ? \"\".concat(profile.first_name, \" \").concat(profile.last_name).trim() || profile.username : 'Someone';\n        // Insert notifications with proper structure for Commitly\n        const notifications = memberIds.map((memberId)=>({\n                user_id: memberId,\n                type: 'accountability_request',\n                title: 'Group Goal Invitation ðŸŽ¯',\n                message: \"\".concat(userName, ' invited you to join the group goal: \"').concat(goal.title, '\"'),\n                data: {\n                    goal_id: goal.id,\n                    inviter_id: user.id,\n                    invitation_type: 'group_goal',\n                    action_required: true\n                },\n                read: false\n            }));\n        const { error: notifError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('notifications').insert(notifications);\n        if (notifError) console.error('Notification error:', notifError);\n        return {\n            goal,\n            success: true\n        };\n    } catch (error) {\n        console.error('Error creating group goal:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Get pending invitations for current user\n */ async function getPendingInvitations() {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        const { data, error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_invitations').select(\"\\n        *,\\n        goal:goals(title, description, category),\\n        inviter:profiles!group_goal_invitations_inviter_id_fkey(\\n          first_name, last_name, username, profile_picture_url\\n        )\\n      \").eq('invitee_id', user.id).eq('status', 'pending').order('created_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return {\n            data,\n            success: true\n        };\n    } catch (error) {\n        console.error('Error fetching invitations:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Accept group goal invitation\n */ async function acceptGroupGoalInvitation(invitationId) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Get invitation details\n        const { data: invitation } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_invitations').select('goal_id, invitee_id').eq('id', invitationId).single();\n        if (!invitation) throw new Error('Invitation not found');\n        // Update invitation status\n        const { error: inviteError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_invitations').update({\n            status: 'accepted',\n            responded_at: new Date().toISOString()\n        }).eq('id', invitationId).eq('invitee_id', user.id);\n        if (inviteError) throw inviteError;\n        // Add user as accepted member\n        const { error: memberError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').upsert({\n            goal_id: invitation.goal_id,\n            user_id: user.id,\n            role: 'member',\n            status: 'accepted',\n            can_edit: false\n        });\n        if (memberError) throw memberError;\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error accepting invitation:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Decline group goal invitation\n */ async function declineGroupGoalInvitation(invitationId) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Get invitation details\n        const { data: invitation } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_invitations').select('goal_id, invitee_id').eq('id', invitationId).single();\n        if (!invitation) throw new Error('Invitation not found');\n        // Update invitation status\n        const { error: inviteError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_invitations').update({\n            status: 'declined',\n            responded_at: new Date().toISOString()\n        }).eq('id', invitationId).eq('invitee_id', user.id);\n        if (inviteError) throw inviteError;\n        // Add user as declined member (triggers activity reassignment)\n        const { error: memberError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').upsert({\n            goal_id: invitation.goal_id,\n            user_id: user.id,\n            role: 'member',\n            status: 'declined',\n            can_edit: false\n        });\n        if (memberError) throw memberError;\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error declining invitation:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Get group goal members\n */ async function getGroupGoalMembers(goalId) {\n    try {\n        const { data, error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select(\"\\n        *,\\n        profile:profiles(first_name, last_name, username, profile_picture_url)\\n      \").eq('goal_id', goalId).order('created_at', {\n            ascending: true\n        });\n        if (error) throw error;\n        return {\n            data,\n            success: true\n        };\n    } catch (error) {\n        console.error('Error fetching members:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Assign activity to user(s) (deprecated - use updateActivityAssignment)\n */ async function assignActivity(activityId, assignment) {\n    return updateActivityAssignment(activityId, assignment);\n}\n/**\n * Complete activity for current user\n */ async function completeActivity(activityId, goalId, notes) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Check if activity is assigned to this user\n        const { data: activity } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').select('assigned_to, assigned_to_all, assigned_members, title').eq('id', activityId).single();\n        if (!activity) throw new Error('Activity not found');\n        // Verify user can complete this activity\n        const canComplete = activity.assigned_to_all || activity.assigned_to === user.id || activity.assigned_members && activity.assigned_members.includes(user.id);\n        if (!canComplete) {\n            throw new Error('You are not assigned to this activity');\n        }\n        // Check if already completed by this user\n        const { data: existingCompletion } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').select('id').eq('activity_id', activityId).eq('user_id', user.id).single();\n        if (existingCompletion) {\n            throw new Error('Activity already completed by you');\n        }\n        // Insert completion record\n        const { error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').insert({\n            activity_id: activityId,\n            user_id: user.id,\n            goal_id: goalId,\n            notes\n        });\n        if (error) throw error;\n        // Notify other group members\n        const { data: members } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('user_id').eq('goal_id', goalId).eq('status', 'accepted').neq('user_id', user.id);\n        if (members && members.length > 0) {\n            const { data: userProfile } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('first_name, last_name, username').eq('id', user.id).single();\n            const userName = userProfile ? \"\".concat(userProfile.first_name, \" \").concat(userProfile.last_name).trim() || userProfile.username : 'Someone';\n            const notifications = members.map((member)=>({\n                    user_id: member.user_id,\n                    type: 'activity_completed',\n                    title: 'Activity Completed! ðŸŽ‰',\n                    message: \"\".concat(userName, ' completed: \"').concat(activity.title, '\"'),\n                    data: {\n                        activity_id: activityId,\n                        goal_id: goalId,\n                        completed_by: user.id,\n                        completed_by_name: userName\n                    },\n                    read: false\n                }));\n            await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('notifications').insert(notifications);\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error completing activity:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Uncomplete activity for current user (remove completion)\n */ async function uncompleteActivity(activityId, goalId) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Check if user can edit this activity\n        const canEdit = await canUserEditActivity(activityId, user.id);\n        if (!canEdit) {\n            throw new Error('You cannot uncomplete this activity');\n        }\n        // Remove completion record\n        const { error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').delete().eq('activity_id', activityId).eq('user_id', user.id);\n        if (error) throw error;\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error uncompleting activity:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Get activity completion status for group goal\n */ async function getActivityCompletions(activityId) {\n    try {\n        const { data, error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').select(\"\\n        *,\\n        user:profiles(first_name, last_name, username, profile_picture_url)\\n      \").eq('activity_id', activityId).order('completed_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return {\n            data,\n            success: true\n        };\n    } catch (error) {\n        console.error('Error fetching completions:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Check if user can update activity (deprecated - use canUserEditActivity)\n */ async function canUserUpdateActivity(activityId, userId) {\n    return canUserEditActivity(activityId, userId);\n}\n/**\n * Check if user is admin (owner) of a group goal\n */ async function isGroupGoalAdmin(goalId, userId) {\n    try {\n        // Check if user is the goal owner\n        const { data: goal } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').select('user_id, is_group_goal').eq('id', goalId).single();\n        if (!goal) return false;\n        // For group goals, check if user is the owner\n        if (goal.is_group_goal) {\n            return goal.user_id === userId;\n        }\n        // For regular goals, only owner can manage\n        return goal.user_id === userId;\n    } catch (error) {\n        console.error('Error checking admin permissions:', error);\n        return false;\n    }\n}\n/**\n * Check if user can edit a specific activity\n */ async function canUserEditActivity(activityId, userId) {\n    try {\n        const { data: activity } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').select('assigned_to, assigned_to_all, assigned_members, goal_id').eq('id', activityId).single();\n        if (!activity) return false;\n        // Check if user is goal admin first\n        const isAdmin = await isGroupGoalAdmin(activity.goal_id, userId);\n        if (isAdmin) return true;\n        // Check if activity is assigned to this user\n        if (activity.assigned_to_all) return true;\n        if (activity.assigned_to === userId) return true;\n        if (activity.assigned_members && activity.assigned_members.includes(userId)) return true;\n        return false;\n    } catch (error) {\n        console.error('Error checking activity edit permissions:', error);\n        return false;\n    }\n}\n/**\n * Get detailed group goal with members and activities\n */ async function getGroupGoalDetails(goalId) {\n    try {\n        // Get goal details\n        const { data: goal, error: goalError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').select('*').eq('id', goalId).single();\n        if (goalError) throw goalError;\n        // Get members\n        const { data: members, error: membersError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select(\"\\n        *,\\n        profile:profiles(first_name, last_name, username, profile_picture_url)\\n      \").eq('goal_id', goalId).order('created_at', {\n            ascending: true\n        });\n        if (membersError) throw membersError;\n        // Get activities with assignments\n        const { data: activities, error: activitiesError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').select('*').eq('goal_id', goalId).order('order_index', {\n            ascending: true\n        });\n        if (activitiesError) throw activitiesError;\n        // Get activity completions\n        const { data: completions, error: completionsError } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').select(\"\\n        *,\\n        user:profiles(first_name, last_name, username, profile_picture_url)\\n      \").eq('goal_id', goalId).order('completed_at', {\n            ascending: false\n        });\n        if (completionsError) throw completionsError;\n        return {\n            data: {\n                goal,\n                members: members || [],\n                activities: activities || [],\n                completions: completions || []\n            },\n            success: true\n        };\n    } catch (error) {\n        console.error('Error fetching group goal details:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Update activity assignment (admin only)\n */ async function updateActivityAssignment(activityId, assignment) {\n    try {\n        var _assignment_assignedMembers;\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Get activity to check permissions\n        const { data: activity } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').select('goal_id').eq('id', activityId).single();\n        if (!activity) throw new Error('Activity not found');\n        // Check if user is admin\n        const isAdmin = await isGroupGoalAdmin(activity.goal_id, user.id);\n        if (!isAdmin) {\n            throw new Error('Only admins can update activity assignments');\n        }\n        const { error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').update({\n            assigned_to: assignment.assignedTo || null,\n            assigned_to_all: assignment.assignedToAll,\n            assigned_members: assignment.assignedMembers || null,\n            activity_type: assignment.assignedToAll ? 'collaborative' : ((_assignment_assignedMembers = assignment.assignedMembers) === null || _assignment_assignedMembers === void 0 ? void 0 : _assignment_assignedMembers.length) ? 'multi_member' : 'individual'\n        }).eq('id', activityId);\n        if (error) throw error;\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error updating activity assignment:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Delete group goal (admin only)\n */ async function deleteGroupGoal(goalId) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Check if user is admin\n        const isAdmin = await isGroupGoalAdmin(goalId, user.id);\n        if (!isAdmin) {\n            throw new Error('Only the goal admin can delete this goal');\n        }\n        // Get goal details for notifications\n        const { data: goal } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').select('title').eq('id', goalId).single();\n        // Get all members to notify them\n        const { data: members } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('user_id, profile:profiles(first_name, last_name)').eq('goal_id', goalId).eq('status', 'accepted').neq('user_id', user.id) // Exclude the admin\n        ;\n        // Delete the goal (cascade will handle related records)\n        const { error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').delete().eq('id', goalId);\n        if (error) throw error;\n        // Notify all members about goal deletion\n        if (members && members.length > 0 && goal) {\n            const { data: adminProfile } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('first_name, last_name, username').eq('id', user.id).single();\n            const adminName = adminProfile ? \"\".concat(adminProfile.first_name, \" \").concat(adminProfile.last_name).trim() || adminProfile.username : 'Admin';\n            const notifications = members.map((member)=>({\n                    user_id: member.user_id,\n                    type: 'goal_deleted',\n                    title: 'Group Goal Deleted',\n                    message: \"\".concat(adminName, ' deleted the group goal: \"').concat(goal.title, '\"'),\n                    data: {\n                        goal_id: goalId,\n                        goal_title: goal.title,\n                        deleted_by: user.id,\n                        deleted_by_name: adminName\n                    },\n                    read: false\n                }));\n            await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('notifications').insert(notifications);\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error deleting group goal:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Update group goal (admin only)\n */ async function updateGroupGoal(goalId, updates) {\n    try {\n        const { data: { user } } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n        // Check if user is admin\n        const isAdmin = await isGroupGoalAdmin(goalId, user.id);\n        if (!isAdmin) {\n            throw new Error('Only the goal admin can edit this goal');\n        }\n        const { error } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').update(updates).eq('id', goalId);\n        if (error) throw error;\n        // If significant changes, notify members\n        if (updates.title || updates.description || updates.target_date) {\n            const { data: members } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('user_id').eq('goal_id', goalId).eq('status', 'accepted').neq('user_id', user.id);\n            if (members && members.length > 0) {\n                const { data: adminProfile } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('first_name, last_name, username').eq('id', user.id).single();\n                const adminName = adminProfile ? \"\".concat(adminProfile.first_name, \" \").concat(adminProfile.last_name).trim() || adminProfile.username : 'Admin';\n                const notifications = members.map((member)=>({\n                        user_id: member.user_id,\n                        type: 'goal_updated',\n                        title: 'Group Goal Updated',\n                        message: \"\".concat(adminName, \" updated the group goal details\"),\n                        data: {\n                            goal_id: goalId,\n                            updated_by: user.id,\n                            updated_by_name: adminName\n                        },\n                        read: false\n                    }));\n                await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('notifications').insert(notifications);\n            }\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error updating group goal:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Get group goal progress with member stats\n */ async function getGroupGoalProgress(goalId) {\n    try {\n        // Get all activities\n        const { data: activities } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').select('id, title, assigned_to, assigned_to_all, completed').eq('goal_id', goalId);\n        if (!activities) return {\n            data: null,\n            success: false\n        };\n        // Get all accepted members\n        const { data: members } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('user_id, profile:profiles(first_name, last_name, username)').eq('goal_id', goalId).eq('status', 'accepted');\n        // Get all completions\n        const { data: completions } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').select('activity_id, user_id').eq('goal_id', goalId);\n        const memberProgress = members === null || members === void 0 ? void 0 : members.map((member)=>{\n            const assignedActivities = activities.filter((a)=>a.assigned_to_all || a.assigned_to === member.user_id);\n            const completedActivities = assignedActivities.filter((a)=>completions === null || completions === void 0 ? void 0 : completions.some((c)=>c.activity_id === a.id && c.user_id === member.user_id));\n            const profile = member.profile;\n            return {\n                user_id: member.user_id,\n                name: profile ? \"\".concat(profile.first_name || '', \" \").concat(profile.last_name || '').trim() : 'Unknown',\n                assigned: assignedActivities.length,\n                completed: completedActivities.length,\n                progress: assignedActivities.length > 0 ? Math.round(completedActivities.length / assignedActivities.length * 100) : 0\n            };\n        });\n        // Calculate overall progress\n        const totalAssignedActivities = (memberProgress === null || memberProgress === void 0 ? void 0 : memberProgress.reduce((sum, member)=>sum + member.assigned, 0)) || 0;\n        const totalCompletedActivities = (memberProgress === null || memberProgress === void 0 ? void 0 : memberProgress.reduce((sum, member)=>sum + member.completed, 0)) || 0;\n        const overallProgress = totalAssignedActivities > 0 ? Math.round(totalCompletedActivities / totalAssignedActivities * 100) : 0;\n        return {\n            data: {\n                totalActivities: activities.length,\n                completedActivities: activities.filter((a)=>a.completed).length,\n                overallProgress,\n                memberProgress\n            },\n            success: true\n        };\n    } catch (error) {\n        console.error('Error fetching progress:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n/**\n * Check if all members have responded to group goal invitation\n */ async function checkAllMembersResponded(goalId) {\n    try {\n        const { data: pendingMembers } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('id').eq('goal_id', goalId).eq('status', 'pending');\n        return !pendingMembers || pendingMembers.length === 0;\n    } catch (error) {\n        console.error('Error checking member responses:', error);\n        return false;\n    }\n}\n/**\n * Check if user can update group goal progress\n * Only allowed if all members have accepted or declined\n */ async function canUpdateGroupGoalProgress(goalId) {\n    try {\n        const { data: goal } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goals').select('is_group_goal').eq('id', goalId).single();\n        // Not a group goal, can update freely\n        if (!(goal === null || goal === void 0 ? void 0 : goal.is_group_goal)) {\n            return {\n                canUpdate: true\n            };\n        }\n        // Check if all members have responded\n        const allResponded = await checkAllMembersResponded(goalId);\n        if (!allResponded) {\n            return {\n                canUpdate: false,\n                reason: 'Waiting for all members to accept or decline the invitation'\n            };\n        }\n        // Check if at least one member accepted\n        const { data: acceptedMembers } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('id').eq('goal_id', goalId).eq('status', 'accepted');\n        if (!acceptedMembers || acceptedMembers.length === 0) {\n            return {\n                canUpdate: false,\n                reason: 'No members have accepted this group goal'\n            };\n        }\n        return {\n            canUpdate: true\n        };\n    } catch (error) {\n        console.error('Error checking update permission:', error);\n        return {\n            canUpdate: false,\n            reason: 'Error checking permissions'\n        };\n    }\n}\n/**\n * Get activity progress for a specific activity\n */ async function getActivityProgress(activityId) {\n    try {\n        // Get activity details\n        const { data: activity } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('goal_activities').select('*, goal_id').eq('id', activityId).single();\n        if (!activity) throw new Error('Activity not found');\n        // Get assigned members\n        let assignedMembers = [];\n        if (activity.assigned_to_all) {\n            const { data: allMembers } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('group_goal_members').select('user_id, profile:profiles(first_name, last_name, username, profile_picture_url)').eq('goal_id', activity.goal_id).eq('status', 'accepted');\n            assignedMembers = allMembers || [];\n        } else if (activity.assigned_members && activity.assigned_members.length > 0) {\n            const { data: multipleMembers } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('id, first_name, last_name, username, profile_picture_url').in('id', activity.assigned_members);\n            if (multipleMembers) {\n                assignedMembers = multipleMembers.map((member)=>({\n                        user_id: member.id,\n                        profile: member\n                    }));\n            }\n        } else if (activity.assigned_to) {\n            const { data: specificMember } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('id, first_name, last_name, username, profile_picture_url').eq('id', activity.assigned_to).single();\n            if (specificMember) {\n                assignedMembers = [\n                    {\n                        user_id: specificMember.id,\n                        profile: specificMember\n                    }\n                ];\n            }\n        }\n        // Get completions\n        const { data: completions } = await _supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from('activity_completions').select(\"\\n        *,\\n        user:profiles(first_name, last_name, username, profile_picture_url)\\n      \").eq('activity_id', activityId).order('completed_at', {\n            ascending: false\n        });\n        const completedUserIds = new Set((completions === null || completions === void 0 ? void 0 : completions.map((c)=>c.user_id)) || []);\n        const progressPercentage = assignedMembers.length > 0 ? Math.round(((completions === null || completions === void 0 ? void 0 : completions.length) || 0) / assignedMembers.length * 100) : 0;\n        return {\n            data: {\n                activity,\n                assignedMembers,\n                completions: completions || [],\n                progressPercentage,\n                completedCount: (completions === null || completions === void 0 ? void 0 : completions.length) || 0,\n                totalAssigned: assignedMembers.length\n            },\n            success: true\n        };\n    } catch (error) {\n        console.error('Error fetching activity progress:', error);\n        return {\n            error,\n            success: false\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/group-goals.ts\n"));

/***/ })

});