// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/about" | "/achievements" | "/analytics" | "/auth/clear-session" | "/auth/kyc" | "/auth/login" | "/auth/reset-password" | "/auth/signup" | "/auth/test-config" | "/auth/update-password" | "/blog" | "/contact" | "/dashboard" | "/debug-session" | "/features" | "/followers" | "/following" | "/goals" | "/goals/[id]" | "/goals/[id]/edit" | "/goals/[id]/group" | "/goals/[id]/partner" | "/goals/[id]/update" | "/goals/create" | "/goals/seasonal" | "/goals/seasonal/[id]/edit" | "/goals/seasonal/[id]/update" | "/goals/seasonal/create" | "/help" | "/notifications" | "/partners" | "/partners/accountability" | "/partners/search" | "/pricing" | "/privacy" | "/profile" | "/profile/[username]" | "/profile/edit" | "/search" | "/settings" | "/settings/goals" | "/settings/privacy" | "/terms"
type AppRouteHandlerRoutes = "/api/auth/set-session" | "/api/follows" | "/api/follows/requests" | "/api/follows/status" | "/api/seasonal-cohorts" | "/api/seasonal-goals" | "/api/seasonal-milestones" | "/api/seasonal-templates" | "/api/session/log" | "/auth/callback"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = "/admin/[[...path]]"
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/about": {}
  "/achievements": {}
  "/admin/[[...path]]": { "path"?: string[]; }
  "/analytics": {}
  "/api/auth/set-session": {}
  "/api/follows": {}
  "/api/follows/requests": {}
  "/api/follows/status": {}
  "/api/seasonal-cohorts": {}
  "/api/seasonal-goals": {}
  "/api/seasonal-milestones": {}
  "/api/seasonal-templates": {}
  "/api/session/log": {}
  "/auth/callback": {}
  "/auth/clear-session": {}
  "/auth/kyc": {}
  "/auth/login": {}
  "/auth/reset-password": {}
  "/auth/signup": {}
  "/auth/test-config": {}
  "/auth/update-password": {}
  "/blog": {}
  "/contact": {}
  "/dashboard": {}
  "/debug-session": {}
  "/features": {}
  "/followers": {}
  "/following": {}
  "/goals": {}
  "/goals/[id]": { "id": string; }
  "/goals/[id]/edit": { "id": string; }
  "/goals/[id]/group": { "id": string; }
  "/goals/[id]/partner": { "id": string; }
  "/goals/[id]/update": { "id": string; }
  "/goals/create": {}
  "/goals/seasonal": {}
  "/goals/seasonal/[id]/edit": { "id": string; }
  "/goals/seasonal/[id]/update": { "id": string; }
  "/goals/seasonal/create": {}
  "/help": {}
  "/notifications": {}
  "/partners": {}
  "/partners/accountability": {}
  "/partners/search": {}
  "/pricing": {}
  "/privacy": {}
  "/profile": {}
  "/profile/[username]": { "username": string; }
  "/profile/edit": {}
  "/search": {}
  "/settings": {}
  "/settings/goals": {}
  "/settings/privacy": {}
  "/terms": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
