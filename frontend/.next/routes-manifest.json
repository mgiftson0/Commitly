{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [
      {
        "source": "/admin/:path*",
        "destination": "http://localhost:3001/admin/:path*",
        "regex": "^/admin(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
      }
    ],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/goals/seasonal/[id]/edit",
      "regex": "^/goals/seasonal/([^/]+?)/edit(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/seasonal/(?<nxtPid>[^/]+?)/edit(?:/)?$"
    },
    {
      "page": "/goals/seasonal/[id]/update",
      "regex": "^/goals/seasonal/([^/]+?)/update(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/seasonal/(?<nxtPid>[^/]+?)/update(?:/)?$"
    },
    {
      "page": "/goals/[id]",
      "regex": "^/goals/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/goals/[id]/edit",
      "regex": "^/goals/([^/]+?)/edit(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/(?<nxtPid>[^/]+?)/edit(?:/)?$"
    },
    {
      "page": "/goals/[id]/group",
      "regex": "^/goals/([^/]+?)/group(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/(?<nxtPid>[^/]+?)/group(?:/)?$"
    },
    {
      "page": "/goals/[id]/partner",
      "regex": "^/goals/([^/]+?)/partner(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/(?<nxtPid>[^/]+?)/partner(?:/)?$"
    },
    {
      "page": "/goals/[id]/update",
      "regex": "^/goals/([^/]+?)/update(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/goals/(?<nxtPid>[^/]+?)/update(?:/)?$"
    },
    {
      "page": "/profile/[username]",
      "regex": "^/profile/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/profile/(?<nxtPusername>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/achievements",
      "regex": "^/achievements(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/achievements(?:/)?$"
    },
    {
      "page": "/analytics",
      "regex": "^/analytics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/analytics(?:/)?$"
    },
    {
      "page": "/auth/callback",
      "regex": "^/auth/callback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/callback(?:/)?$"
    },
    {
      "page": "/auth/clear-session",
      "regex": "^/auth/clear\\-session(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/clear\\-session(?:/)?$"
    },
    {
      "page": "/auth/kyc",
      "regex": "^/auth/kyc(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/kyc(?:/)?$"
    },
    {
      "page": "/auth/login",
      "regex": "^/auth/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/login(?:/)?$"
    },
    {
      "page": "/auth/reset-password",
      "regex": "^/auth/reset\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/reset\\-password(?:/)?$"
    },
    {
      "page": "/auth/signup",
      "regex": "^/auth/signup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/signup(?:/)?$"
    },
    {
      "page": "/auth/test-config",
      "regex": "^/auth/test\\-config(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/test\\-config(?:/)?$"
    },
    {
      "page": "/auth/update-password",
      "regex": "^/auth/update\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/update\\-password(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/debug-session",
      "regex": "^/debug\\-session(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/debug\\-session(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/features",
      "regex": "^/features(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/features(?:/)?$"
    },
    {
      "page": "/followers",
      "regex": "^/followers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/followers(?:/)?$"
    },
    {
      "page": "/following",
      "regex": "^/following(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/following(?:/)?$"
    },
    {
      "page": "/goals",
      "regex": "^/goals(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/goals(?:/)?$"
    },
    {
      "page": "/goals/create",
      "regex": "^/goals/create(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/goals/create(?:/)?$"
    },
    {
      "page": "/goals/seasonal",
      "regex": "^/goals/seasonal(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/goals/seasonal(?:/)?$"
    },
    {
      "page": "/goals/seasonal/create",
      "regex": "^/goals/seasonal/create(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/goals/seasonal/create(?:/)?$"
    },
    {
      "page": "/help",
      "regex": "^/help(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/help(?:/)?$"
    },
    {
      "page": "/notifications",
      "regex": "^/notifications(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/notifications(?:/)?$"
    },
    {
      "page": "/partners",
      "regex": "^/partners(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/partners(?:/)?$"
    },
    {
      "page": "/partners/accountability",
      "regex": "^/partners/accountability(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/partners/accountability(?:/)?$"
    },
    {
      "page": "/partners/search",
      "regex": "^/partners/search(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/partners/search(?:/)?$"
    },
    {
      "page": "/pricing",
      "regex": "^/pricing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/pricing(?:/)?$"
    },
    {
      "page": "/privacy",
      "regex": "^/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy(?:/)?$"
    },
    {
      "page": "/profile",
      "regex": "^/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile(?:/)?$"
    },
    {
      "page": "/profile/edit",
      "regex": "^/profile/edit(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile/edit(?:/)?$"
    },
    {
      "page": "/search",
      "regex": "^/search(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/search(?:/)?$"
    },
    {
      "page": "/settings",
      "regex": "^/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings(?:/)?$"
    },
    {
      "page": "/settings/goals",
      "regex": "^/settings/goals(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/goals(?:/)?$"
    },
    {
      "page": "/settings/privacy",
      "regex": "^/settings/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/privacy(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}